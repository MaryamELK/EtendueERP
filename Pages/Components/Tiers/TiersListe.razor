@using EtendueERP.Models.SageAPI
@using Microsoft.EntityFrameworkCore
@using Data
@inject DialogService DialogService
@using AntDesign
<Collapse>
    <Panel Header="Filtrer" Key="1">
         <GridRow>
             <GridCol Xs="24" Md="2" Sm="4" class="ant-form-item-label"><label>Recherche</label></GridCol>
            <GridCol Xs="24" Md="7" Sm="14"><Input Style="Width: 100%;" @oninput="@(args => OnInput(args.Value.ToString()))" @bind-Value="@vl_text" /></GridCol>
            <GridCol Xs="24" Md="2" Sm="4" class="ant-form-item-label"><label>Famille</label></GridCol>
            <GridCol Xs="24" Md="3" Sm="6">
                <Select OnSelectedItemChanged="UpdateGrid" @bind-Value="@vl_famille" DataSource="@familles" TItem="F_FAMILLE" TItemValue="string" ValueName="@nameof(F_FAMILLE.FA_CodeFamille)" LabelName="@nameof(F_FAMILLE.FA_Intitule)" />
             </GridCol>
             <GridCol Xs="24" Md="2" Sm="4" class="ant-form-item-label"><label>Unité</label></GridCol>
             <GridCol Xs="24" Md="3" Sm="6">
                <Select OnSelectedItemChanged="UpdateGrid" @bind-Value="@vl_unite" DataSource="@unites" TItem="P_UNITE" TItemValue="short?" ValueName="@nameof(P_UNITE.cbMarq)" LabelName="@nameof(P_UNITE.U_Intitule)" />
             </GridCol>
            <GridCol Xs="24" Md="2" Sm="4" class="ant-form-item-label"><label>Etat de stock</label></GridCol>
             <GridCol Xs="24" Md="3" Sm="6">
                <Select OnSelectedItemChanged="UpdateGrid" TItem="short?" TItemValue="short?" @bind-Value="@vl_stock">
                    <SelectOptions>
                        <SelectOption TItem="short?" TItemValue="short?" Value="0" Label="   Tout"/>
                        <SelectOption TItem="short?" TItemValue="short?" Value="1" Label="En stock"/>
                        <SelectOption TItem="short?" TItemValue="short?" Value="2" Label="Epuisé" />
                    </SelectOptions>
                </Select>
             </GridCol>
          </GridRow>
    </Panel>
</Collapse>
@if (@items == null)
{
     <div class="spin-center">
        <Spin size="large" />
    </div>
}
else
{
        <RadzenDataGrid RowSelect="@DataGridRowSelect" AllowFiltering="false" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="40" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@items" TItem="V_COMPTET" LogicalFilterOperator="LogicalFilterOperator.Or" Style="font-size: 9px; font-weight: normal; font-family: Arial; min-height: 300px;" PagerAlwaysVisible="true" AllowColumnReorder="false" Responsive="true"
                AllowColumnPicking="true" PageSizeText="élément par page" PagingSummaryFormat="Page {0}/{1} ({2} élément)" ColumnsShowingText="colonnes">
            <Columns>
                <RadzenDataGridColumn TItem="V_COMPTET" Property="CT_Num" Title="Numéro" Width="100px" Visible="@CTNum"></RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="V_COMPTET" Property="CT_Ville" Title="Ville" Width="100px" Visible="@CTVille"></RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="V_COMPTET" Property="CT_Intitule" Title="Intitule" Width="250px" Visible="@CTIntitule"></RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="V_COMPTET" Property="CT_Adresse" Title="Adresse" Width="100px" Visible="@CTAdresse"></RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="V_COMPTET" Property="CT_Telephone" Title="Téléphone" Width="100px" Visible="@CTTelephone"></RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="V_COMPTET" Property="CT_EMail" Title="Email" Width="150px" Visible="@CTEMail"></RadzenDataGridColumn>
                
                <RadzenDataGridColumn TItem="V_COMPTET" Property="DL_MontantHT" Title="CA HT" Width="100px" Visible="@DLMontantHT" FormatString="{0:N2}" TextAlign="Radzen.TextAlign.Right">
                    <FooterTemplate>
                        <b>@String.Format(new System.Globalization.CultureInfo("en-US"), "{0:N2}", items.Sum(a => a.DL_MontantHT))</b>
                    </FooterTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="V_COMPTET" Property="DL_MontantTTC" Title="CA TTC" Width="100px" Visible="@DLMontantTTC" FormatString="{0:N2}" TextAlign="Radzen.TextAlign.Right">
                    <FooterTemplate>
                        <b>@String.Format(new System.Globalization.CultureInfo("en-US"), "{0:N2}", items.Sum(a => a.DL_MontantTTC))</b>
                    </FooterTemplate>
                </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="V_COMPTET" Property="DL_DateBL" Title="Der. Activité" Width="100px" Visible="@DLDateBL" FormatString="{0:d}" TextAlign="Radzen.TextAlign.Right"></RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="V_COMPTET" Property="DelaiSommeil" Title="Durée Inactivité" Width="100px" Visible="@DelaiSommeil" FormatString="{0:N0}" TextAlign="Radzen.TextAlign.Right"></RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="V_COMPTET" Property="Taux" Title="%" Width="100px" Visible="@Taux" FormatString="{0:N2}" TextAlign="Radzen.TextAlign.Right"></RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="V_COMPTET" Property="NbrArticles" Title="Nbr Articles" Width="100px" Visible="@NbrArticles" FormatString="{0:N0}" TextAlign="Radzen.TextAlign.Right"></RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="V_COMPTET" Property="NbrDocuments" Title="Nbr Documents" Width="100px" Visible="@NbrDocuments" FormatString="{0:N0}" TextAlign="Radzen.TextAlign.Right"></RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="V_COMPTET" Property="RG_Montant" Title="Total Réglements" Width="100px" Visible="@RGMontant" FormatString="{0:N2}" TextAlign="Radzen.TextAlign.Right">
                    <FooterTemplate>
                        <b>@String.Format(new System.Globalization.CultureInfo("en-US"), "{0:N2}", items.Sum(a => a.RG_Montant))</b>
                    </FooterTemplate>
                </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="V_COMPTET" Property="SoldeCommercial" Title="Solde Commercial" Width="100px" Visible="@SoldeCommercial" FormatString="{0:N2}" TextAlign="Radzen.TextAlign.Right">
                    <FooterTemplate>
                        <b>@String.Format(new System.Globalization.CultureInfo("en-US"), "{0:N2}", items.Sum(a => a.SoldeCommercial))</b>
                    </FooterTemplate>
                </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="V_COMPTET" Property="SoldeComptable" Title="Solde Comptable" Width="100px" Visible="@SoldeComptable" FormatString="{0:N2}" TextAlign="Radzen.TextAlign.Right">
                    <FooterTemplate>
                        <b>@String.Format(new System.Globalization.CultureInfo("en-US"), "{0:N2}", items.Sum(a => a.SoldeComptable))</b>
                    </FooterTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

}

@code
{

    //Parameters
    [Parameter] public ICollection<V_COMPTET> data { get; set; }
    [Parameter] public bool CTNum { get; set; } = true;
    [Parameter] public bool CTIntitule { get; set; } = true;
    [Parameter] public bool CTAdresse { get; set; } = true;
    [Parameter] public bool CTVille { get; set; } = true;
    [Parameter] public bool CTEMail { get; set; } = true;
    [Parameter] public bool CTTelephone { get; set; } = true;
    [Parameter] public bool DLMontantHT { get; set; } = true;
    [Parameter] public bool DLMontantTTC { get; set; } = true;
    [Parameter] public bool Taux { get; set; } = true;
    [Parameter] public bool NbrDocuments { get; set; } = true;
    [Parameter] public bool NbrArticles { get; set; } = true;
    [Parameter] public bool RGMontant { get; set; } = true;
    [Parameter] public bool SoldeCommercial { get; set; } = true;
    [Parameter] public bool SoldeComptable { get; set; } = true;
    [Parameter] public bool DLDateBL { get; set; } = true;
    [Parameter] public bool DelaiSommeil { get; set; } = true;

    //End Parameters



    SageAPIContext db = new SageAPIContext();
    string vl_text;
    short? vl_unite = 0;
    short? vl_stock = 0;
    private ICollection<V_COMPTET> items;
    string vl_famille = "";
    ICollection<P_UNITE> unites;
    ICollection<F_FAMILLE> familles;


    protected override async Task OnInitializedAsync()
    {
        await Task.Run(LoadData);
    }
    private void LoadData()
    {
        System.Threading.Thread.Sleep(3000);
        if (data == null)
        {
            data = db.V_COMPTET.ToList();
        }
        items = data;

        var un = new P_UNITE();
        un.cbIndice = 0;
        un.U_Intitule = "   Tout";
        unites = db.P_UNITE.Where(a => (a.U_Intitule ?? "") != "").ToList();
        unites.Add(un);
        unites = unites.OrderBy(a => a.U_Intitule).ToList();

        var fa = new F_FAMILLE();
        fa.FA_CodeFamille = "";
        fa.FA_Intitule = "   Tout";
        familles = db.F_FAMILLE.ToList();
        familles.Add(fa);
        familles = familles.OrderBy(a => a.FA_Intitule).ToList();
    }

    protected async Task DataGridRowSelect(V_COMPTET args)
    {
        await DialogService.OpenAsync<TiersFiche>($"{args.CT_Intitule}",
      new Dictionary<string, object>() { { "row", args } },
      new Radzen.DialogOptions() { Width = "1024px", Height = "600px", Resizable = true });
    }
    void OnInput(string value)
    {
        //items = items.Where(a => a.AR_Design.ToUpper().Contains(value.ToUpper()) || a.AR_Ref.ToUpper().Contains(value.ToUpper())).ToList();
    }
    void UpdateGrid()
    {
        items = data;
        /*if ((vl_text ?? "") != "")
        {
            items = items.Where(a => a.AR_Design.ToUpper().Contains(((vl_text ?? "")).ToUpper()) || a.AR_Ref.ToUpper().Contains(((vl_text ?? "")).ToUpper())).ToList();
        }
        if (vl_unite != 0)
        {
            items = items.Where(a => a.AR_UniteVen == vl_unite).ToList();
        }
        if (vl_famille != "")
        {
            items = items.Where(a => a.FA_CodeFamille == vl_famille).ToList();
        }
        if (vl_stock == 1)
        {
            items = items.Where(a => a.EtatStock == "En stock").ToList();
        }
        else if (vl_stock == 2)
        {
            items = items.Where(a => a.EtatStock == "Stock épuisé").ToList();
        }*/
    }



}