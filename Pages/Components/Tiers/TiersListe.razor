@using EtendueERP.Models.SageAPI
@using Microsoft.EntityFrameworkCore
@using Data
@inject DialogService DialogService
@using AntDesign
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager UriHelper

<Button Type="@AntDesign.ButtonType.Primary" OnClick="args=>Add()">Add</Button>
<RadzenContent Container="main">
    <Tabs DefaultActiveKey="0" Type="@TabType.EditableCard" HideAdd @bind-ActiveKey="activekey">
        <TabPane Key="0"  Tab="LISTE DES CLIENTS" Closable="false">
            <Collapse>
    <Panel Header="Filtrer" Key="1">
        <GridRow>
            <GridCol Xs="24" Md="3" class="ant-form-item-label">Recherche</GridCol>
            <GridCol Xs="24" Md="7"><Input Size="@AntSizeLDSType.Small" Style="Width: 100%;" @oninput="@(args => OnInput(args.Value.ToString()))" @bind-Value="@vl_text" /></GridCol>
            <GridCol Xs="24" Md="3" class="ant-form-item-label">Etat Solde</GridCol>
            <GridCol Xs="24" Md="4">
                                <Select Size="@AntSizeLDSType.Small" OnSelectedItemChanged="UpdateGrid" TItem="short?" TItemValue="short?" @bind-Value="@vl_solde">
                    <SelectOptions>
                        <SelectOption TItem="short?" TItemValue="short?" Value="0" Label="   Tout" />
                        <SelectOption TItem="short?" TItemValue="short?" Value="1" Label="Soldé" />
                        <SelectOption TItem="short?" TItemValue="short?" Value="2" Label="Non soldé" />
                    </SelectOptions>
                </Select>
            </GridCol>
            <GridCol Xs="24" Md="3" class="ant-form-item-label">Sommeil</GridCol>
            <GridCol Xs="24" Md="4">
                                <Select Size="@AntSizeLDSType.Small" OnSelectedItemChanged="UpdateGrid" TItem="short?" TItemValue="short?" @bind-Value="@vl_sommeil">
                    <SelectOptions>
                        <SelectOption TItem="short?" TItemValue="short?" Value="0" Label="   Tout" />
                        <SelectOption TItem="short?" TItemValue="short?" Value="1" Label="Actif" />
                        <SelectOption TItem="short?" TItemValue="short?" Value="2" Label="En sommeil" />
                    </SelectOptions>
                </Select>
            </GridCol>
        </GridRow>
    </Panel>
</Collapse>
<GridRow>
    <GridCol Xs="24" Md="24">
                    @if (@items == null)
                    {
                        <div class="spin-center">
                            <Spin size="large" />
                        </div>
                    }
                    else
                    {
                        <Table TItem="V_COMPTET" Context="tiers" DataSource="@items" PageSize="50" Responsive OnRowClick="args=>RowClicked(args.Data)">
                            <PropertyColumn Property="a=>a.CT_Num" Title="Numéro"  Hidden="@(!CTNum)" ></PropertyColumn>
                            <PropertyColumn Property="a=>a.CT_Ville" Title="Ville"  Hidden="@(!CTVille)"></PropertyColumn>
                            <PropertyColumn Property="a=>a.CT_Intitule" Title="Intitule" Width="250px" Hidden="@(!CTIntitule)"></PropertyColumn>
                            <PropertyColumn Property="a=>a.CT_Adresse" Title="Adresse" Hidden="@(!CTAdresse)"></PropertyColumn>
                            <PropertyColumn Property="a=>a.CT_Telephone" Title="Téléphone"  Hidden="@(!CTTelephone)"></PropertyColumn>
                            <PropertyColumn Property="a=>a.CT_EMail" Title="Email" Hidden="@(!CTEMail)"></PropertyColumn>
                            <PropertyColumn Property="a=>a.DL_MontantHT" Title="CA HT"  Hidden="@(!DLMontantHT)" Format="### ### ##0.00" Align="ColumnAlign.Right"></PropertyColumn>
                            <PropertyColumn Property="a=>a.DL_MontantTTC" Title="CA TTC"  Hidden="@(!DLMontantTTC)" Format="### ### ##0.00" Align="ColumnAlign.Right"></PropertyColumn>
                            <PropertyColumn Property="a=>a.DL_DateBL" Title="Der. Activité"  Hidden="@(!DLDateBL)" Format="dd/MM/yyyy" Align="ColumnAlign.Right"></PropertyColumn>
                            <PropertyColumn Property="a=>a.DelaiSommeil" Title="Durée Inactivité"  Hidden="@(!DelaiSommeil)" Format="### ### ##0.00" Align="ColumnAlign.Right"></PropertyColumn>
                            <PropertyColumn Property="a=>a.Taux" Title="%"  Hidden="@(!Taux)" Format="### ### ##0.00" Align="ColumnAlign.Right"></PropertyColumn>
                            <PropertyColumn Property="a=>a.NbrArticles" Title="Nbr Articles"  Hidden="@(!NbrArticles)" Format="### ### ##0.00" Align="ColumnAlign.Right"></PropertyColumn>
                            <PropertyColumn Property="a=>a.NbrDocuments" Title="Nbr Documents"  Hidden="@(!NbrDocuments)" Format="### ### ##0.00" Align="ColumnAlign.Right"></PropertyColumn>
                            <PropertyColumn Property="a=>a.RG_Montant" Title="Total Réglements"  Hidden="@(!RGMontant)" Format="### ### ##0.00" Align="ColumnAlign.Right" />
                            <PropertyColumn Property="a=>a.SoldeCommercial" Title="Solde Commercial"  Hidden="@(!SoldeCommercial)" Format="### ### ##0.00" Align="ColumnAlign.Right"></PropertyColumn>
                            <PropertyColumn Property="a=>a.SoldeComptable" Title="Solde Comptable"  Hidden="@(!SoldeComptable)" Format="### ### ##0.00" Align="ColumnAlign.Right">
                            </PropertyColumn>
                        </Table>

                    }
    </GridCol>
</GridRow>
        </TabPane>
        @if(rows != null) 
        {
            foreach (V_COMPTET row in rows) {
                <TabPane Key="@row.cbMarq.ToString()" Tab="@row.CT_Intitule" Closable="true">
                    <TiersFiche row="@row" />
                </TabPane>
            }
        }
    </Tabs>
</RadzenContent>



@code
{

    //Parameters
    [Parameter] public ICollection<V_COMPTET> data { get; set; }
    [Parameter] public bool CTNum { get; set; } = true;
    [Parameter] public bool CTIntitule { get; set; } = true;
    [Parameter] public bool CTAdresse { get; set; } = true;
    [Parameter] public bool CTVille { get; set; } = true;
    [Parameter] public bool CTEMail { get; set; } = true;
    [Parameter] public bool CTTelephone { get; set; } = true;
    [Parameter] public bool DLMontantHT { get; set; } = true;
    [Parameter] public bool DLMontantTTC { get; set; } = true;
    [Parameter] public bool Taux { get; set; } = true;
    [Parameter] public bool NbrDocuments { get; set; } = true;
    [Parameter] public bool NbrArticles { get; set; } = true;
    [Parameter] public bool RGMontant { get; set; } = true;
    [Parameter] public bool SoldeCommercial { get; set; } = true;
    [Parameter] public bool SoldeComptable { get; set; } = true;
    [Parameter] public bool DLDateBL { get; set; } = true;
    [Parameter] public bool DelaiSommeil { get; set; } = true;
    [Parameter] public int CT_Type { get; set; } = 0;
    //End Parameters



    SageAPIContext db = new SageAPIContext();
    string vl_text;
    short? vl_solde = 0;
    short? vl_sommeil = 0;
    private ICollection<V_COMPTET> items;
    ICollection<P_UNITE> unites;
    ICollection<F_FAMILLE> familles;
    List<V_COMPTET> rows = new List<V_COMPTET>();
    string activekey = "0";


    protected override async Task OnInitializedAsync()
    {
        await Task.Run(LoadData);
    }
    private void LoadData()
    {
        System.Threading.Thread.Sleep(3000);
        if (data == null)
        {
            data = db.V_COMPTET.Where(a => a.CT_Type == CT_Type).OrderBy(a => a.CT_Intitule).ToList();
        }
        items = data;
    }

    protected async Task RowClicked(V_COMPTET args)
    {
        rows.Add(args);
        activekey = args.cbMarq.ToString();
    }
    protected async Task Add()
    {
        await DialogService.OpenAsync<TiersFiche>($"Nouveau client", new Dictionary<string, object>() { { "type", "add" } }, new Radzen.DialogOptions() { Width = "1024px", Height = "600px", Resizable = true });
    }
    void OnInput(string value)
    {
        UpdateGrid();
        items = items.Where(a => a.CT_Num.ToUpper().Contains(value.ToUpper()) || a.CT_Intitule.ToUpper().Contains(value.ToUpper())).ToList();
    }
    void UpdateGrid()
    {
        items = data;

        if (vl_solde == 1)
        {
            items = items.Where(a => a.SoldeCommercial == 0).ToList();
        }
        else if(vl_solde == 2) {
            items = items.Where(a => a.SoldeCommercial != 0).ToList();
        }

        if (vl_sommeil == 1)
        {
            items = items.Where(a => a.CT_Sommeil == 0).ToList();
        }
        else if (vl_sommeil == 2)
        {
            items = items.Where(a => a.CT_Sommeil == 1).ToList();
        }
    }



}