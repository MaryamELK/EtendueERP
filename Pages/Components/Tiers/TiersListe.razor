@using EtendueERP.Models.SageAPI
@using Microsoft.EntityFrameworkCore
@using Data
@inject DialogService DialogService
@using AntDesign
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager UriHelper

<RadzenContent Container="main">
    <Tabs DefaultActiveKey="1">
        <TabPane Key="0" Tab="Liste des clients" Closable="false">
            <Collapse>
    <Panel Header="Filtrer" Key="1">
        <GridRow>
            <GridCol Xs="24" Md="3" class="ant-form-item-label">Recherche</GridCol>
            <GridCol Xs="24" Md="7"><Input Size="@AntSizeLDSType.Small" Style="Width: 100%;" @oninput="@(args => OnInput(args.Value.ToString()))" @bind-Value="@vl_text" /></GridCol>
            <GridCol Xs="24" Md="3" class="ant-form-item-label">Etat Solde</GridCol>
            <GridCol Xs="24" Md="4">
                                <Select Size="@AntSizeLDSType.Small" OnSelectedItemChanged="UpdateGrid" TItem="short?" TItemValue="short?" @bind-Value="@vl_solde">
                    <SelectOptions>
                        <SelectOption TItem="short?" TItemValue="short?" Value="0" Label="   Tout" />
                        <SelectOption TItem="short?" TItemValue="short?" Value="1" Label="Soldé" />
                        <SelectOption TItem="short?" TItemValue="short?" Value="2" Label="Non soldé" />
                    </SelectOptions>
                </Select>
            </GridCol>
            <GridCol Xs="24" Md="3" class="ant-form-item-label">Sommeil</GridCol>
            <GridCol Xs="24" Md="4">
                                <Select Size="@AntSizeLDSType.Small" OnSelectedItemChanged="UpdateGrid" TItem="short?" TItemValue="short?" @bind-Value="@vl_sommeil">
                    <SelectOptions>
                        <SelectOption TItem="short?" TItemValue="short?" Value="0" Label="   Tout" />
                        <SelectOption TItem="short?" TItemValue="short?" Value="1" Label="Actif" />
                        <SelectOption TItem="short?" TItemValue="short?" Value="2" Label="En sommeil" />
                    </SelectOptions>
                </Select>
            </GridCol>
        </GridRow>
    </Panel>
</Collapse>
@if (@items == null)
{
     <div class="spin-center">
        <Spin size="large" />
    </div>
}
else
{
        <RadzenDataGrid RowSelect="@DataGridRowSelect" AllowFiltering="false" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="40" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@items" TItem="V_COMPTET" LogicalFilterOperator="LogicalFilterOperator.Or" Style="font-size: 9px; font-weight: normal; font-family: Arial; min-height: 300px;" PagerAlwaysVisible="true" AllowColumnReorder="false" Responsive="true"
                AllowColumnPicking="true" PageSizeText="élément par page" PagingSummaryFormat="Page {0}/{1} ({2} élément)" ColumnsShowingText="colonnes">
            <Columns>
                <RadzenDataGridColumn TItem="V_COMPTET" Property="CT_Num" Title="Numéro" Width="100px" Visible="@CTNum"></RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="V_COMPTET" Property="CT_Ville" Title="Ville" Width="100px" Visible="@CTVille"></RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="V_COMPTET" Property="CT_Intitule" Title="Intitule" Width="250px" Visible="@CTIntitule"></RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="V_COMPTET" Property="CT_Adresse" Title="Adresse" Width="100px" Visible="@CTAdresse"></RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="V_COMPTET" Property="CT_Telephone" Title="Téléphone" Width="100px" Visible="@CTTelephone"></RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="V_COMPTET" Property="CT_EMail" Title="Email" Width="150px" Visible="@CTEMail"></RadzenDataGridColumn>
                
                <RadzenDataGridColumn TItem="V_COMPTET" Property="DL_MontantHT" Title="CA HT" Width="100px" Visible="@DLMontantHT" FormatString="{0:N2}" TextAlign="Radzen.TextAlign.Right">
                    <FooterTemplate>
                    <b>@String.Format(new System.Globalization.CultureInfo("fr-FR"), "{0:N2}", items.Sum(a => a.DL_MontantHT))</b>
                    </FooterTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="V_COMPTET" Property="DL_MontantTTC" Title="CA TTC" Width="100px" Visible="@DLMontantTTC" FormatString="{0:N2}" TextAlign="Radzen.TextAlign.Right">
                    <FooterTemplate>
                    <b>@String.Format(new System.Globalization.CultureInfo("fr-FR"), "{0:N2}", items.Sum(a => a.DL_MontantTTC))</b>
                    </FooterTemplate>
                </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="V_COMPTET" Property="DL_DateBL" Title="Der. Activité" Width="100px" Visible="@DLDateBL" FormatString="{0:d}" TextAlign="Radzen.TextAlign.Right"></RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="V_COMPTET" Property="DelaiSommeil" Title="Durée Inactivité" Width="100px" Visible="@DelaiSommeil" FormatString="{0:N0}" TextAlign="Radzen.TextAlign.Right"></RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="V_COMPTET" Property="Taux" Title="%" Width="100px" Visible="@Taux" FormatString="{0:N2}" TextAlign="Radzen.TextAlign.Right"></RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="V_COMPTET" Property="NbrArticles" Title="Nbr Articles" Width="100px" Visible="@NbrArticles" FormatString="{0:N0}" TextAlign="Radzen.TextAlign.Right"></RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="V_COMPTET" Property="NbrDocuments" Title="Nbr Documents" Width="100px" Visible="@NbrDocuments" FormatString="{0:N0}" TextAlign="Radzen.TextAlign.Right"></RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="V_COMPTET" Property="RG_Montant" Title="Total Réglements" Width="100px" Visible="@RGMontant" FormatString="{0:N2}" TextAlign="Radzen.TextAlign.Right">
                    <FooterTemplate>
                        <b>@String.Format(new System.Globalization.CultureInfo("fr-FR"), "{0:N2}", items.Sum(a => a.RG_Montant))</b>
                    </FooterTemplate>
                </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="V_COMPTET" Property="SoldeCommercial" Title="Solde Commercial" Width="100px" Visible="@SoldeCommercial" FormatString="{0:N2}" TextAlign="Radzen.TextAlign.Right">
                    <FooterTemplate>
                        <b>@String.Format(new System.Globalization.CultureInfo("fr-FR"), "{0:N2}", items.Sum(a => a.SoldeCommercial))</b>
                    </FooterTemplate>
                </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="V_COMPTET" Property="SoldeComptable" Title="Solde Comptable" Width="100px" Visible="@SoldeComptable" FormatString="{0:N2}" TextAlign="Radzen.TextAlign.Right">
                    <FooterTemplate>
                    <b>@String.Format(new System.Globalization.CultureInfo("fr-FR"), "{0:N2}", items.Sum(a => a.SoldeComptable))</b>
                    </FooterTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

}
        </TabPane>
        @if(rows != null) 
        {
            foreach (V_COMPTET row in rows) {
                <TabPane Key="@key.ToString()" Tab="@row.CT_Intitule" Closable="true">
                    <TiersFiche row="@row" />
                </TabPane>
            }
        }
    </Tabs>
</RadzenContent>



@code
{

    //Parameters
    [Parameter] public ICollection<V_COMPTET> data { get; set; }
    [Parameter] public bool CTNum { get; set; } = true;
    [Parameter] public bool CTIntitule { get; set; } = true;
    [Parameter] public bool CTAdresse { get; set; } = true;
    [Parameter] public bool CTVille { get; set; } = true;
    [Parameter] public bool CTEMail { get; set; } = true;
    [Parameter] public bool CTTelephone { get; set; } = true;
    [Parameter] public bool DLMontantHT { get; set; } = true;
    [Parameter] public bool DLMontantTTC { get; set; } = true;
    [Parameter] public bool Taux { get; set; } = true;
    [Parameter] public bool NbrDocuments { get; set; } = true;
    [Parameter] public bool NbrArticles { get; set; } = true;
    [Parameter] public bool RGMontant { get; set; } = true;
    [Parameter] public bool SoldeCommercial { get; set; } = true;
    [Parameter] public bool SoldeComptable { get; set; } = true;
    [Parameter] public bool DLDateBL { get; set; } = true;
    [Parameter] public bool DelaiSommeil { get; set; } = true;
    [Parameter] public int CT_Type { get; set; } = 0;
    //End Parameters



    SageAPIContext db = new SageAPIContext();
    string vl_text;
    short? vl_solde = 0;
    short? vl_sommeil = 0;
    private ICollection<V_COMPTET> items;
    ICollection<P_UNITE> unites;
    ICollection<F_FAMILLE> familles;
    List<V_COMPTET> rows = new List<V_COMPTET>();
    int key = 2;

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(LoadData);
    }
    private void LoadData()
    {
        System.Threading.Thread.Sleep(3000);
        if (data == null)
        {
            data = db.V_COMPTET.Where(a => a.CT_Type == CT_Type).OrderBy(a => a.CT_Intitule).ToList();
        }
        items = data;
    }

    protected async Task DataGridRowSelect(V_COMPTET args)
    {
        /*await DialogService.OpenAsync<TiersFiche>($"{args.CT_Intitule}",
      new Dictionary<string, object>() { { "row", args } },
      new Radzen.DialogOptions() { Width = "1024px", Height = "600px", Resizable = true });*/
        //UriHelper.NavigateTo($"clients/{args.CT_Num}");
        rows.Add(args);
        key = key + 1;

    }

    void OnInput(string value)
    {
        UpdateGrid();
        items = items.Where(a => a.CT_Num.ToUpper().Contains(value.ToUpper()) || a.CT_Intitule.ToUpper().Contains(value.ToUpper())).ToList();
    }
    void UpdateGrid()
    {
        items = data;

        if (vl_solde == 1)
        {
            items = items.Where(a => a.SoldeCommercial == 0).ToList();
        }
        else if(vl_solde == 2) {
            items = items.Where(a => a.SoldeCommercial != 0).ToList();
        }

        if (vl_sommeil == 1)
        {
            items = items.Where(a => a.CT_Sommeil == 0).ToList();
        }
        else if (vl_sommeil == 2)
        {
            items = items.Where(a => a.CT_Sommeil == 1).ToList();
        }
    }



}